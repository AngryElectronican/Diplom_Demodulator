
DEMODULATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000424  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  00000498  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd2  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ef  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000366  00000000  00000000  000028c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002c2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 31       	cpi	r26, 0x1D	; 29
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  88:	0c 94 10 02 	jmp	0x420	; 0x420 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
char buf[8];
void ADC_Init();
void ADC_SetChannel(uint8_t channel);
void INT0_Init();

ISR(ADC_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	static uint16_t delta=76;
	static uint16_t data=0;
	static uint8_t	read=0;
	static uint8_t i=0;
	uint8_t bit=0;
	data=ADC;
  a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  a6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if(data>max){
  aa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <max.1898>
  ae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <max.1898+0x1>
  b2:	28 17       	cp	r18, r24
  b4:	39 07       	cpc	r19, r25
  b6:	20 f4       	brcc	.+8      	; 0xc0 <__vector_21+0x30>
		max=data;
  b8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <max.1898+0x1>
  bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <max.1898>
	}
	if (data>max-delta){
  c0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <max.1898>
  c4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <max.1898+0x1>
  c8:	2c 54       	subi	r18, 0x4C	; 76
  ca:	31 09       	sbc	r19, r1
  cc:	28 17       	cp	r18, r24
  ce:	39 07       	cpc	r19, r25
  d0:	60 f4       	brcc	.+24     	; 0xea <__vector_21+0x5a>
		bit=0;
		max=data;
  d2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <max.1898+0x1>
  d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <max.1898>
		PORTD|=1<<LED;
  da:	5f 9a       	sbi	0x0b, 7	; 11
	}else{
		bit=1;
		PORTD&=~(1<<LED);
	}
	switch(state){
  dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	81 f0       	breq	.+32     	; 0x104 <__vector_21+0x74>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d1 f5       	brne	.+116    	; 0x15c <__vector_21+0xcc>
  e8:	2a c0       	rjmp	.+84     	; 0x13e <__vector_21+0xae>
		bit=0;
		max=data;
		PORTD|=1<<LED;
	}else{
		bit=1;
		PORTD&=~(1<<LED);
  ea:	5f 98       	cbi	0x0b, 7	; 11
	}
	switch(state){
  ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	51 f0       	breq	.+20     	; 0x108 <__vector_21+0x78>
  f4:	18 f0       	brcs	.+6      	; 0xfc <__vector_21+0x6c>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	21 f1       	breq	.+72     	; 0x142 <__vector_21+0xb2>
  fa:	30 c0       	rjmp	.+96     	; 0x15c <__vector_21+0xcc>
		case 0:
				if(bit==1){
					state=1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
 102:	2c c0       	rjmp	.+88     	; 0x15c <__vector_21+0xcc>
	data=ADC;
	if(data>max){
		max=data;
	}
	if (data>max-delta){
		bit=0;
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	01 c0       	rjmp	.+2      	; 0x10a <__vector_21+0x7a>
		max=data;
		PORTD|=1<<LED;
	}else{
		bit=1;
 108:	81 e0       	ldi	r24, 0x01	; 1
				if(bit==1){
					state=1;
				}
				break;
		case 1:
				read|=bit<<i;
 10a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <i.1902>
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 2e       	mov	r0, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <__vector_21+0x88>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <__vector_21+0x84>
 11c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 120:	89 2b       	or	r24, r25
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				i++;
 126:	2f 5f       	subi	r18, 0xFF	; 255
				if(i>=8){
 128:	28 30       	cpi	r18, 0x08	; 8
 12a:	18 f4       	brcc	.+6      	; 0x132 <__vector_21+0xa2>
					state=1;
				}
				break;
		case 1:
				read|=bit<<i;
				i++;
 12c:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <i.1902>
 130:	15 c0       	rjmp	.+42     	; 0x15c <__vector_21+0xcc>
				if(i>=8){
					i=0;
 132:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <i.1902>
					state=2;
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
 13c:	0f c0       	rjmp	.+30     	; 0x15c <__vector_21+0xcc>
	data=ADC;
	if(data>max){
		max=data;
	}
	if (data>max-delta){
		bit=0;
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	01 c0       	rjmp	.+2      	; 0x144 <__vector_21+0xb4>
		max=data;
		PORTD|=1<<LED;
	}else{
		bit=1;
 142:	21 e0       	ldi	r18, 0x01	; 1
					i=0;
					state=2;
				}
				break;
		case 2:
				if(bit!=read%2){
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 148:	98 2f       	mov	r25, r24
 14a:	91 70       	andi	r25, 0x01	; 1
 14c:	92 17       	cp	r25, r18
 14e:	21 f0       	breq	.+8      	; 0x158 <__vector_21+0xc8>
					OCR2B=read;
 150:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
					read=0;
 154:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				}
				state=0;
 158:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state>
				break;
		}
		
		
}
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_1>:

ISR(INT0_vect){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
	Timer0_StartTimer(&time1);
 190:	8a e0       	ldi	r24, 0x0A	; 10
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Timer0_StartTimer>
	EIMSK&=~(1<<INT0);
 198:	e8 98       	cbi	0x1d, 0	; 29
	flag=1;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <flag>
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <ADC_Init>:
		sei();
    }
}

void ADC_Init(){
	ADMUX|=(1<<REFS0);
 1c2:	ec e7       	ldi	r30, 0x7C	; 124
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(0<<ADPS0)|(0<<ADPS1)|(0<<ADPS2);
 1cc:	ea e7       	ldi	r30, 0x7A	; 122
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	88 6c       	ori	r24, 0xC8	; 200
 1d4:	80 83       	st	Z, r24
 1d6:	08 95       	ret

000001d8 <ADC_SetChannel>:
}
void ADC_SetChannel(uint8_t channel){
	ADMUX=(ADMUX&0xF0)+channel;
 1d8:	ec e7       	ldi	r30, 0x7C	; 124
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	90 81       	ld	r25, Z
 1de:	90 7f       	andi	r25, 0xF0	; 240
 1e0:	89 0f       	add	r24, r25
 1e2:	80 83       	st	Z, r24
 1e4:	08 95       	ret

000001e6 <INT0_Init>:
}
void INT0_Init(){
	EICRA|=(1<<ISC01)|(1<<ISC00);
 1e6:	e9 e6       	ldi	r30, 0x69	; 105
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	83 60       	ori	r24, 0x03	; 3
 1ee:	80 83       	st	Z, r24
	EIMSK|=1<<INT0;
 1f0:	e8 9a       	sbi	0x1d, 0	; 29
 1f2:	08 95       	ret

000001f4 <main>:
	flag=1;
}

int main(void)
{
	DDRD|=(1<<TX)|(1<<LED)|(1<<PIN_OUT);
 1f4:	8a b1       	in	r24, 0x0a	; 10
 1f6:	8a 68       	ori	r24, 0x8A	; 138
 1f8:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<RX)|(1<<PIN_OUT)|(1<<ZERO);
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	8d 60       	ori	r24, 0x0D	; 13
 1fe:	8b b9       	out	0x0b, r24	; 11
	USART_Init();
 200:	0e 94 02 02 	call	0x404	; 0x404 <USART_Init>
	Timer0_Init();
 204:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Timer0_Init>
	INT0_Init();
 208:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <INT0_Init>
	ADC_Init();
 20c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <ADC_Init>
	ADC_SetChannel(0);
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <ADC_SetChannel>
	TCCR2A|=(1<<COM2B1)|(1<<WGM21)|(1<<WGM20);
 216:	e0 eb       	ldi	r30, 0xB0	; 176
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	83 62       	ori	r24, 0x23	; 35
 21e:	80 83       	st	Z, r24
	TCCR2B|=(1<<CS22);
 220:	e1 eb       	ldi	r30, 0xB1	; 177
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	84 60       	ori	r24, 0x04	; 4
 228:	80 83       	st	Z, r24
	OCR2B=0;
 22a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	sei();
 22e:	78 94       	sei
	Timer0_StartTimer(&time2);
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Timer0_StartTimer>
			flag=0;
			sei();
			if((EIFR>>INTF0)&1){
				EIFR|=1<<INTF0;
			}
			ADCSRA|=1<<ADSC;
 238:	ca e7       	ldi	r28, 0x7A	; 122
 23a:	d0 e0       	ldi	r29, 0x00	; 0
	sei();
	Timer0_StartTimer(&time2);
    while (1) 
    {

		cli();
 23c:	f8 94       	cli
		if(Timer0_TimeIsOut(&time1,50)&&flag){
 23e:	42 e3       	ldi	r20, 0x32	; 50
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	8a e0       	ldi	r24, 0x0A	; 10
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Timer0_TimeIsOut>
 24e:	88 23       	and	r24, r24
 250:	69 f0       	breq	.+26     	; 0x26c <main+0x78>
 252:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flag>
 256:	88 23       	and	r24, r24
 258:	49 f0       	breq	.+18     	; 0x26c <main+0x78>
			flag=0;
 25a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag>
			sei();
 25e:	78 94       	sei
			if((EIFR>>INTF0)&1){
 260:	e0 99       	sbic	0x1c, 0	; 28
				EIFR|=1<<INTF0;
 262:	e0 9a       	sbi	0x1c, 0	; 28
			}
			ADCSRA|=1<<ADSC;
 264:	88 81       	ld	r24, Y
 266:	80 64       	ori	r24, 0x40	; 64
 268:	88 83       	st	Y, r24
			EIMSK|=1<<INT0;
 26a:	e8 9a       	sbi	0x1d, 0	; 29
			//Timer0_StartTimer(&time1);
		}
		sei();
 26c:	78 94       	sei
    }
 26e:	e6 cf       	rjmp	.-52     	; 0x23c <main+0x48>

00000270 <__vector_14>:
	OCR0A=12;
	sei();
}
Time Timer0_GetTime(){
	return GlobalTime;
}
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	af 93       	push	r26
 280:	bf 93       	push	r27
 282:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <GlobalTime>
 286:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <GlobalTime+0x1>
 28a:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <GlobalTime+0x2>
 28e:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <GlobalTime+0x3>
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	a1 1d       	adc	r26, r1
 296:	b1 1d       	adc	r27, r1
 298:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <GlobalTime>
 29c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <GlobalTime+0x1>
 2a0:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <GlobalTime+0x2>
 2a4:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <GlobalTime+0x3>
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <Timer0_Init>:
 2ba:	84 b5       	in	r24, 0x24	; 36
 2bc:	82 60       	ori	r24, 0x02	; 2
 2be:	84 bd       	out	0x24, r24	; 36
 2c0:	85 b5       	in	r24, 0x25	; 37
 2c2:	83 60       	ori	r24, 0x03	; 3
 2c4:	85 bd       	out	0x25, r24	; 37
 2c6:	ee e6       	ldi	r30, 0x6E	; 110
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	82 60       	ori	r24, 0x02	; 2
 2ce:	80 83       	st	Z, r24
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	87 bd       	out	0x27, r24	; 39
 2d4:	78 94       	sei
 2d6:	08 95       	ret

000002d8 <Timer0_StartTimer>:
inline void Timer0_StartTimer(Time* StartTime){
	*StartTime=GlobalTime;
 2d8:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <GlobalTime>
 2dc:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <GlobalTime+0x1>
 2e0:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <GlobalTime+0x2>
 2e4:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <GlobalTime+0x3>
 2e8:	fc 01       	movw	r30, r24
 2ea:	40 83       	st	Z, r20
 2ec:	51 83       	std	Z+1, r21	; 0x01
 2ee:	62 83       	std	Z+2, r22	; 0x02
 2f0:	73 83       	std	Z+3, r23	; 0x03
 2f2:	08 95       	ret

000002f4 <Timer0_TimeIsOut>:
}
uint8_t Timer0_TimeIsOut(Time* StartTime,Time Delay){
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
	return (GlobalTime-(*StartTime)>=Delay);
 2f8:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <GlobalTime>
 2fc:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <GlobalTime+0x1>
 300:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <GlobalTime+0x2>
 304:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <GlobalTime+0x3>
 308:	fc 01       	movw	r30, r24
 30a:	80 81       	ld	r24, Z
 30c:	91 81       	ldd	r25, Z+1	; 0x01
 30e:	a2 81       	ldd	r26, Z+2	; 0x02
 310:	b3 81       	ldd	r27, Z+3	; 0x03
 312:	08 1b       	sub	r16, r24
 314:	19 0b       	sbc	r17, r25
 316:	2a 0b       	sbc	r18, r26
 318:	3b 0b       	sbc	r19, r27
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	04 17       	cp	r16, r20
 31e:	15 07       	cpc	r17, r21
 320:	26 07       	cpc	r18, r22
 322:	37 07       	cpc	r19, r23
 324:	08 f4       	brcc	.+2      	; 0x328 <Timer0_TimeIsOut+0x34>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	08 95       	ret

0000032e <Buffer_Write>:
			return 1;
		}
	}else{
		return 1;
	}
}
 32e:	e2 e1       	ldi	r30, 0x12	; 18
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	90 81       	ld	r25, Z
 334:	21 81       	ldd	r18, Z+1	; 0x01
 336:	92 13       	cpse	r25, r18
 338:	16 c0       	rjmp	.+44     	; 0x366 <Buffer_Write+0x38>
 33a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <mass1+0x2>
 33e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <mass1+0x3>
 342:	27 30       	cpi	r18, 0x07	; 7
 344:	31 05       	cpc	r19, r1
 346:	79 f4       	brne	.+30     	; 0x366 <Buffer_Write+0x38>
 348:	e9 2f       	mov	r30, r25
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	ee 5e       	subi	r30, 0xEE	; 238
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	84 83       	std	Z+4, r24	; 0x04
 352:	9f 5f       	subi	r25, 0xFF	; 255
 354:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <mass1>
 358:	97 30       	cpi	r25, 0x07	; 7
 35a:	f8 f0       	brcs	.+62     	; 0x39a <Buffer_Write+0x6c>
 35c:	e2 e1       	ldi	r30, 0x12	; 18
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	10 82       	st	Z, r1
 362:	11 82       	std	Z+1, r1	; 0x01
 364:	08 95       	ret
 366:	a2 e1       	ldi	r26, 0x12	; 18
 368:	b1 e0       	ldi	r27, 0x01	; 1
 36a:	e9 2f       	mov	r30, r25
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	ee 5e       	subi	r30, 0xEE	; 238
 370:	fe 4f       	sbci	r31, 0xFE	; 254
 372:	84 83       	std	Z+4, r24	; 0x04
 374:	12 96       	adiw	r26, 0x02	; 2
 376:	2d 91       	ld	r18, X+
 378:	3c 91       	ld	r19, X
 37a:	13 97       	sbiw	r26, 0x03	; 3
 37c:	2f 5f       	subi	r18, 0xFF	; 255
 37e:	3f 4f       	sbci	r19, 0xFF	; 255
 380:	13 96       	adiw	r26, 0x03	; 3
 382:	3c 93       	st	X, r19
 384:	2e 93       	st	-X, r18
 386:	12 97       	sbiw	r26, 0x02	; 2
 388:	9f 5f       	subi	r25, 0xFF	; 255
 38a:	97 30       	cpi	r25, 0x07	; 7
 38c:	18 f4       	brcc	.+6      	; 0x394 <Buffer_Write+0x66>
 38e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <mass1>
 392:	08 95       	ret
 394:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <mass1>
 398:	08 95       	ret
 39a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <mass1+0x1>
 39e:	08 95       	ret

000003a0 <__vector_18>:

ISR(USART_RX_vect){
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	6f 93       	push	r22
 3b4:	7f 93       	push	r23
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
	UCSR0B&=~(1<<RXCIE0);
 3c6:	c1 ec       	ldi	r28, 0xC1	; 193
 3c8:	d0 e0       	ldi	r29, 0x00	; 0
 3ca:	88 81       	ld	r24, Y
 3cc:	8f 77       	andi	r24, 0x7F	; 127
 3ce:	88 83       	st	Y, r24
	Buffer_Write(UDR0);
 3d0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3d4:	0e 94 97 01 	call	0x32e	; 0x32e <Buffer_Write>
	UCSR0B|=1<<RXCIE0;
 3d8:	88 81       	ld	r24, Y
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	88 83       	st	Y, r24
}
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <USART_Init>:

void USART_Init(){
	UCSR0B|=(1<<RXCIE0)|(1<<TXEN0)|(1<<RXEN0);
 404:	e1 ec       	ldi	r30, 0xC1	; 193
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	88 69       	ori	r24, 0x98	; 152
 40c:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
 40e:	e2 ec       	ldi	r30, 0xC2	; 194
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	86 60       	ori	r24, 0x06	; 6
 416:	80 83       	st	Z, r24
	UBRR0L = 51;
 418:	83 e3       	ldi	r24, 0x33	; 51
 41a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 41e:	08 95       	ret

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
