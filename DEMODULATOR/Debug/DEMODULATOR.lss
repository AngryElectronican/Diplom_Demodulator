
DEMODULATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000456  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800100  00800100  000004ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd2  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  000011e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000701  00000000  00000000  00001b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00002214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  0000245c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000380  00000000  00000000  00002913  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 31       	cpi	r26, 0x1E	; 30
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 13 01 	call	0x226	; 0x226 <main>
  88:	0c 94 29 02 	jmp	0x452	; 0x452 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
char buf[8];
void ADC_Init();
void ADC_SetChannel(uint8_t channel);
void INT0_Init();

ISR(ADC_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
	static uint16_t delta=76;
	static uint16_t data=0;
	static uint16_t	read=0;
	static uint8_t i=0;
	uint8_t bit=0;
	data=ADC;
  a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if(data>max){
  ae:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <max.1898>
  b2:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <max.1898+0x1>
  b6:	28 17       	cp	r18, r24
  b8:	39 07       	cpc	r19, r25
  ba:	20 f4       	brcc	.+8      	; 0xc4 <__vector_21+0x34>
		max=data;
  bc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <max.1898+0x1>
  c0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <max.1898>
	}
	if (data>max-delta){
  c4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <max.1898>
  c8:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <max.1898+0x1>
  cc:	2c 54       	subi	r18, 0x4C	; 76
  ce:	31 09       	sbc	r19, r1
  d0:	28 17       	cp	r18, r24
  d2:	39 07       	cpc	r19, r25
  d4:	68 f4       	brcc	.+26     	; 0xf0 <__vector_21+0x60>
		bit=0;
		max=data;
  d6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <max.1898+0x1>
  da:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <max.1898>
		PORTD|=1<<LED;
  de:	5f 9a       	sbi	0x0b, 7	; 11
	}else{
		bit=1;
		PORTD&=~(1<<LED);
	}
	switch(state){
  e0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <state>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	a9 f0       	breq	.+42     	; 0x112 <__vector_21+0x82>
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	09 f0       	breq	.+2      	; 0xee <__vector_21+0x5e>
  ec:	4e c0       	rjmp	.+156    	; 0x18a <__vector_21+0xfa>
  ee:	33 c0       	rjmp	.+102    	; 0x156 <__vector_21+0xc6>
		bit=0;
		max=data;
		PORTD|=1<<LED;
	}else{
		bit=1;
		PORTD&=~(1<<LED);
  f0:	5f 98       	cbi	0x0b, 7	; 11
	}
	switch(state){
  f2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <state>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	71 f0       	breq	.+28     	; 0x116 <__vector_21+0x86>
  fa:	18 f0       	brcs	.+6      	; 0x102 <__vector_21+0x72>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	69 f1       	breq	.+90     	; 0x15a <__vector_21+0xca>
 100:	44 c0       	rjmp	.+136    	; 0x18a <__vector_21+0xfa>
		case 0:
				if(bit==1){
					state=1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					read=0;
 108:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <read.1901+0x1>
 10c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <read.1901>
 110:	3c c0       	rjmp	.+120    	; 0x18a <__vector_21+0xfa>
	data=ADC;
	if(data>max){
		max=data;
	}
	if (data>max-delta){
		bit=0;
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	01 c0       	rjmp	.+2      	; 0x118 <__vector_21+0x88>
		max=data;
		PORTD|=1<<LED;
	}else{
		bit=1;
 116:	81 e0       	ldi	r24, 0x01	; 1
					state=1;
					read=0;
				}
				break;
		case 1:
				read|=bit<<i;//******* исправить
 118:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 2e       	mov	r0, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <__vector_21+0x96>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <__vector_21+0x92>
 12a:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <read.1901>
 12e:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <read.1901+0x1>
 132:	84 2b       	or	r24, r20
 134:	95 2b       	or	r25, r21
 136:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <read.1901+0x1>
 13a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <read.1901>
				i++;
 13e:	2f 5f       	subi	r18, 0xFF	; 255
				if(i>=16){
 140:	20 31       	cpi	r18, 0x10	; 16
 142:	18 f4       	brcc	.+6      	; 0x14a <__vector_21+0xba>
					read=0;
				}
				break;
		case 1:
				read|=bit<<i;//******* исправить
				i++;
 144:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 148:	20 c0       	rjmp	.+64     	; 0x18a <__vector_21+0xfa>
				if(i>=16){
					i=0;
 14a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
					state=2;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 154:	1a c0       	rjmp	.+52     	; 0x18a <__vector_21+0xfa>
	data=ADC;
	if(data>max){
		max=data;
	}
	if (data>max-delta){
		bit=0;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	01 c0       	rjmp	.+2      	; 0x15c <__vector_21+0xcc>
		max=data;
		PORTD|=1<<LED;
	}else{
		bit=1;
 15a:	81 e0       	ldi	r24, 0x01	; 1
					i=0;
					state=2;
				}
				break;
		case 2:
				if(bit!=read%2){
 15c:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <read.1901>
 160:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <read.1901+0x1>
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	a9 01       	movw	r20, r18
 168:	41 70       	andi	r20, 0x01	; 1
 16a:	55 27       	eor	r21, r21
 16c:	84 17       	cp	r24, r20
 16e:	95 07       	cpc	r25, r21
 170:	51 f0       	breq	.+20     	; 0x186 <__vector_21+0xf6>
					//read=0;
					if ((0xFF&(read>>8)==MY_ADDR) || (0xFF&(read>>8)==ALL_ADDR)){
 172:	83 2f       	mov	r24, r19
 174:	99 27       	eor	r25, r25
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	91 05       	cpc	r25, r1
 17a:	19 f0       	breq	.+6      	; 0x182 <__vector_21+0xf2>
 17c:	8f 3f       	cpi	r24, 0xFF	; 255
 17e:	91 05       	cpc	r25, r1
 180:	11 f4       	brne	.+4      	; 0x186 <__vector_21+0xf6>
						OCR2B=(uint8_t)read&0xFF;
 182:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
						}
				}
				state=0;
 186:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <state>
				break;
		}

	
}
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_1>:

ISR(INT0_vect){
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	Timer0_StartTimer(&time1);
 1c2:	8b e0       	ldi	r24, 0x0B	; 11
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 85 01 	call	0x30a	; 0x30a <Timer0_StartTimer>
	EIMSK&=~(1<<INT0);
 1ca:	e8 98       	cbi	0x1d, 0	; 29
	flag=1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag>
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <ADC_Init>:
		sei();
    }
}

void ADC_Init(){
	ADMUX|=(1<<REFS0);
 1f4:	ec e7       	ldi	r30, 0x7C	; 124
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	80 64       	ori	r24, 0x40	; 64
 1fc:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(0<<ADPS0)|(0<<ADPS1)|(0<<ADPS2);
 1fe:	ea e7       	ldi	r30, 0x7A	; 122
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	88 6c       	ori	r24, 0xC8	; 200
 206:	80 83       	st	Z, r24
 208:	08 95       	ret

0000020a <ADC_SetChannel>:
}
void ADC_SetChannel(uint8_t channel){
	ADMUX=(ADMUX&0xF0)+channel;
 20a:	ec e7       	ldi	r30, 0x7C	; 124
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	90 81       	ld	r25, Z
 210:	90 7f       	andi	r25, 0xF0	; 240
 212:	89 0f       	add	r24, r25
 214:	80 83       	st	Z, r24
 216:	08 95       	ret

00000218 <INT0_Init>:
}
void INT0_Init(){
	EICRA|=(1<<ISC01)|(1<<ISC00);
 218:	e9 e6       	ldi	r30, 0x69	; 105
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	83 60       	ori	r24, 0x03	; 3
 220:	80 83       	st	Z, r24
	EIMSK|=1<<INT0;
 222:	e8 9a       	sbi	0x1d, 0	; 29
 224:	08 95       	ret

00000226 <main>:
	flag=1;
}

int main(void)
{
	DDRD|=(1<<TX)|(1<<LED)|(1<<PIN_OUT);
 226:	8a b1       	in	r24, 0x0a	; 10
 228:	8a 68       	ori	r24, 0x8A	; 138
 22a:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<RX)|(1<<PIN_OUT)|(1<<ZERO);
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	8d 60       	ori	r24, 0x0D	; 13
 230:	8b b9       	out	0x0b, r24	; 11
	USART_Init();
 232:	0e 94 1b 02 	call	0x436	; 0x436 <USART_Init>
	Timer0_Init();
 236:	0e 94 76 01 	call	0x2ec	; 0x2ec <Timer0_Init>
	INT0_Init();
 23a:	0e 94 0c 01 	call	0x218	; 0x218 <INT0_Init>
	ADC_Init();
 23e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ADC_Init>
	ADC_SetChannel(0);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 05 01 	call	0x20a	; 0x20a <ADC_SetChannel>
	TCCR2A|=(1<<COM2B1)|(1<<WGM21)|(1<<WGM20);
 248:	e0 eb       	ldi	r30, 0xB0	; 176
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	83 62       	ori	r24, 0x23	; 35
 250:	80 83       	st	Z, r24
	TCCR2B|=(1<<CS22);
 252:	e1 eb       	ldi	r30, 0xB1	; 177
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	84 60       	ori	r24, 0x04	; 4
 25a:	80 83       	st	Z, r24
	OCR2B=0;
 25c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	sei();
 260:	78 94       	sei
	Timer0_StartTimer(&time2);
 262:	87 e0       	ldi	r24, 0x07	; 7
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 85 01 	call	0x30a	; 0x30a <Timer0_StartTimer>
			flag=0;
			sei();
			if((EIFR>>INTF0)&1){
				EIFR|=1<<INTF0;
			}
			ADCSRA|=1<<ADSC;
 26a:	ca e7       	ldi	r28, 0x7A	; 122
 26c:	d0 e0       	ldi	r29, 0x00	; 0
	sei();
	Timer0_StartTimer(&time2);
    while (1) 
    {

		cli();
 26e:	f8 94       	cli
		if(Timer0_TimeIsOut(&time1,50)&&flag){
 270:	42 e3       	ldi	r20, 0x32	; 50
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	8b e0       	ldi	r24, 0x0B	; 11
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 93 01 	call	0x326	; 0x326 <Timer0_TimeIsOut>
 280:	88 23       	and	r24, r24
 282:	69 f0       	breq	.+26     	; 0x29e <main+0x78>
 284:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag>
 288:	88 23       	and	r24, r24
 28a:	49 f0       	breq	.+18     	; 0x29e <main+0x78>
			flag=0;
 28c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag>
			sei();
 290:	78 94       	sei
			if((EIFR>>INTF0)&1){
 292:	e0 99       	sbic	0x1c, 0	; 28
				EIFR|=1<<INTF0;
 294:	e0 9a       	sbi	0x1c, 0	; 28
			}
			ADCSRA|=1<<ADSC;
 296:	88 81       	ld	r24, Y
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	88 83       	st	Y, r24
			EIMSK|=1<<INT0;
 29c:	e8 9a       	sbi	0x1d, 0	; 29
			//Timer0_StartTimer(&time1);
		}
		sei();
 29e:	78 94       	sei
    }
 2a0:	e6 cf       	rjmp	.-52     	; 0x26e <main+0x48>

000002a2 <__vector_14>:
	OCR0A=12;
	sei();
}
Time Timer0_GetTime(){
	return GlobalTime;
}
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <GlobalTime>
 2b8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <GlobalTime+0x1>
 2bc:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <GlobalTime+0x2>
 2c0:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <GlobalTime+0x3>
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	a1 1d       	adc	r26, r1
 2c8:	b1 1d       	adc	r27, r1
 2ca:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <GlobalTime>
 2ce:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <GlobalTime+0x1>
 2d2:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <GlobalTime+0x2>
 2d6:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <GlobalTime+0x3>
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <Timer0_Init>:
 2ec:	84 b5       	in	r24, 0x24	; 36
 2ee:	82 60       	ori	r24, 0x02	; 2
 2f0:	84 bd       	out	0x24, r24	; 36
 2f2:	85 b5       	in	r24, 0x25	; 37
 2f4:	83 60       	ori	r24, 0x03	; 3
 2f6:	85 bd       	out	0x25, r24	; 37
 2f8:	ee e6       	ldi	r30, 0x6E	; 110
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	80 83       	st	Z, r24
 302:	8c e0       	ldi	r24, 0x0C	; 12
 304:	87 bd       	out	0x27, r24	; 39
 306:	78 94       	sei
 308:	08 95       	ret

0000030a <Timer0_StartTimer>:
inline void Timer0_StartTimer(Time* StartTime){
	*StartTime=GlobalTime;
 30a:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <GlobalTime>
 30e:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <GlobalTime+0x1>
 312:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <GlobalTime+0x2>
 316:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <GlobalTime+0x3>
 31a:	fc 01       	movw	r30, r24
 31c:	40 83       	st	Z, r20
 31e:	51 83       	std	Z+1, r21	; 0x01
 320:	62 83       	std	Z+2, r22	; 0x02
 322:	73 83       	std	Z+3, r23	; 0x03
 324:	08 95       	ret

00000326 <Timer0_TimeIsOut>:
}
uint8_t Timer0_TimeIsOut(Time* StartTime,Time Delay){
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
	return (GlobalTime-(*StartTime)>=Delay);
 32a:	00 91 0f 01 	lds	r16, 0x010F	; 0x80010f <GlobalTime>
 32e:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <GlobalTime+0x1>
 332:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <GlobalTime+0x2>
 336:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <GlobalTime+0x3>
 33a:	fc 01       	movw	r30, r24
 33c:	80 81       	ld	r24, Z
 33e:	91 81       	ldd	r25, Z+1	; 0x01
 340:	a2 81       	ldd	r26, Z+2	; 0x02
 342:	b3 81       	ldd	r27, Z+3	; 0x03
 344:	08 1b       	sub	r16, r24
 346:	19 0b       	sbc	r17, r25
 348:	2a 0b       	sbc	r18, r26
 34a:	3b 0b       	sbc	r19, r27
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	04 17       	cp	r16, r20
 350:	15 07       	cpc	r17, r21
 352:	26 07       	cpc	r18, r22
 354:	37 07       	cpc	r19, r23
 356:	08 f4       	brcc	.+2      	; 0x35a <Timer0_TimeIsOut+0x34>
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <Buffer_Write>:
			return 1;
		}
	}else{
		return 1;
	}
}
 360:	e3 e1       	ldi	r30, 0x13	; 19
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	90 81       	ld	r25, Z
 366:	21 81       	ldd	r18, Z+1	; 0x01
 368:	92 13       	cpse	r25, r18
 36a:	16 c0       	rjmp	.+44     	; 0x398 <Buffer_Write+0x38>
 36c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <mass1+0x2>
 370:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <mass1+0x3>
 374:	27 30       	cpi	r18, 0x07	; 7
 376:	31 05       	cpc	r19, r1
 378:	79 f4       	brne	.+30     	; 0x398 <Buffer_Write+0x38>
 37a:	e9 2f       	mov	r30, r25
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ed 5e       	subi	r30, 0xED	; 237
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	84 83       	std	Z+4, r24	; 0x04
 384:	9f 5f       	subi	r25, 0xFF	; 255
 386:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <mass1>
 38a:	97 30       	cpi	r25, 0x07	; 7
 38c:	f8 f0       	brcs	.+62     	; 0x3cc <Buffer_Write+0x6c>
 38e:	e3 e1       	ldi	r30, 0x13	; 19
 390:	f1 e0       	ldi	r31, 0x01	; 1
 392:	10 82       	st	Z, r1
 394:	11 82       	std	Z+1, r1	; 0x01
 396:	08 95       	ret
 398:	a3 e1       	ldi	r26, 0x13	; 19
 39a:	b1 e0       	ldi	r27, 0x01	; 1
 39c:	e9 2f       	mov	r30, r25
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	ed 5e       	subi	r30, 0xED	; 237
 3a2:	fe 4f       	sbci	r31, 0xFE	; 254
 3a4:	84 83       	std	Z+4, r24	; 0x04
 3a6:	12 96       	adiw	r26, 0x02	; 2
 3a8:	2d 91       	ld	r18, X+
 3aa:	3c 91       	ld	r19, X
 3ac:	13 97       	sbiw	r26, 0x03	; 3
 3ae:	2f 5f       	subi	r18, 0xFF	; 255
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	13 96       	adiw	r26, 0x03	; 3
 3b4:	3c 93       	st	X, r19
 3b6:	2e 93       	st	-X, r18
 3b8:	12 97       	sbiw	r26, 0x02	; 2
 3ba:	9f 5f       	subi	r25, 0xFF	; 255
 3bc:	97 30       	cpi	r25, 0x07	; 7
 3be:	18 f4       	brcc	.+6      	; 0x3c6 <Buffer_Write+0x66>
 3c0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <mass1>
 3c4:	08 95       	ret
 3c6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mass1>
 3ca:	08 95       	ret
 3cc:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <mass1+0x1>
 3d0:	08 95       	ret

000003d2 <__vector_18>:

ISR(USART_RX_vect){
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	2f 93       	push	r18
 3de:	3f 93       	push	r19
 3e0:	4f 93       	push	r20
 3e2:	5f 93       	push	r21
 3e4:	6f 93       	push	r22
 3e6:	7f 93       	push	r23
 3e8:	8f 93       	push	r24
 3ea:	9f 93       	push	r25
 3ec:	af 93       	push	r26
 3ee:	bf 93       	push	r27
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
	UCSR0B&=~(1<<RXCIE0);
 3f8:	c1 ec       	ldi	r28, 0xC1	; 193
 3fa:	d0 e0       	ldi	r29, 0x00	; 0
 3fc:	88 81       	ld	r24, Y
 3fe:	8f 77       	andi	r24, 0x7F	; 127
 400:	88 83       	st	Y, r24
	Buffer_Write(UDR0);
 402:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 406:	0e 94 b0 01 	call	0x360	; 0x360 <Buffer_Write>
	UCSR0B|=1<<RXCIE0;
 40a:	88 81       	ld	r24, Y
 40c:	80 68       	ori	r24, 0x80	; 128
 40e:	88 83       	st	Y, r24
}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	bf 91       	pop	r27
 41a:	af 91       	pop	r26
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	7f 91       	pop	r23
 422:	6f 91       	pop	r22
 424:	5f 91       	pop	r21
 426:	4f 91       	pop	r20
 428:	3f 91       	pop	r19
 42a:	2f 91       	pop	r18
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <USART_Init>:

void USART_Init(){
	UCSR0B|=(1<<RXCIE0)|(1<<TXEN0)|(1<<RXEN0);
 436:	e1 ec       	ldi	r30, 0xC1	; 193
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	88 69       	ori	r24, 0x98	; 152
 43e:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
 440:	e2 ec       	ldi	r30, 0xC2	; 194
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	86 60       	ori	r24, 0x06	; 6
 448:	80 83       	st	Z, r24
	UBRR0L = 51;
 44a:	83 e3       	ldi	r24, 0x33	; 51
 44c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 450:	08 95       	ret

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
